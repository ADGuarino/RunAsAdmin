#Launch an elevated PowerShell widow
############################################################################################
$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$myWindowsPrincipal = new-object System.Security.Principal.WindowsPrincipal($myWindowsID)
$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator
  
#Check to see if PowerShell is currently running as Administrator
############################################################################################
if ($myWindowsPrincipal.IsInRole($adminRole))
   {

#If elevated change background to black. If not relaunch PowerShell as Administrator
############################################################################################
   $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Elevated)"
   $Host.UI.RawUI.BackgroundColor = "Black"
   clear-host
   }
else
    {
    #I am not running "as Administrator" - so relaunch as administrator
    
    #Create a new process object that starts PowerShell
    $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    
    #Specify the current script path and name as a parameter
    $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    
    #Indicate that the process should be elevated
    $newProcess.Verb = "runas";
    
    #Start the new process
    [System.Diagnostics.Process]::Start($newProcess);
        
    
    #Exit from the current, unelevated, process
    exit
    }

#Adjust window size
############################################################################################
$h = get-host
$win = $h.ui.rawui.windowsize
$win.width  = 100 
$win.Height = 30
$h.ui.rawui.set_windowsize($win)
############################################################################################